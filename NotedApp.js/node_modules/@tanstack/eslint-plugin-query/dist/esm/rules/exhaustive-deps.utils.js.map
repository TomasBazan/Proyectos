{"version":3,"file":"exhaustive-deps.utils.js","sources":["../../../src/rules/exhaustive-deps.utils.ts"],"sourcesContent":["import { AST_NODE_TYPES } from '@typescript-eslint/utils'\nimport { ASTUtils } from '../utils/ast-utils'\nimport type { TSESLint } from '@typescript-eslint/utils'\n\nexport const ExhaustiveDepsUtils = {\n  isRelevantReference(params: {\n    context: Readonly<TSESLint.RuleContext<string, ReadonlyArray<unknown>>>\n    reference: TSESLint.Scope.Reference\n    scopeManager: TSESLint.Scope.ScopeManager\n  }) {\n    const { reference, scopeManager, context } = params\n    const component = ASTUtils.getFunctionAncestor(context)\n\n    if (\n      component !== undefined &&\n      !ASTUtils.isDeclaredInNode({\n        scopeManager,\n        reference,\n        functionNode: component,\n      })\n    ) {\n      return false\n    }\n\n    return (\n      reference.identifier.name !== 'undefined' &&\n      reference.identifier.parent?.type !== AST_NODE_TYPES.NewExpression &&\n      !ExhaustiveDepsUtils.isQueryClientReference(reference)\n    )\n  },\n  isQueryClientReference(reference: TSESLint.Scope.Reference) {\n    const declarator = reference.resolved?.defs[0]?.node\n\n    return (\n      declarator?.type === AST_NODE_TYPES.VariableDeclarator &&\n      declarator.init?.type === AST_NODE_TYPES.CallExpression &&\n      declarator.init.callee.type === AST_NODE_TYPES.Identifier &&\n      declarator.init.callee.name === 'useQueryClient'\n    )\n  },\n}\n"],"names":[],"mappings":";;AAIO,MAAM,sBAAsB;AAAA,EACjC,oBAAoB,QAIjB;;AACD,UAAM,EAAE,WAAW,cAAc,QAAA,IAAY;AACvC,UAAA,YAAY,SAAS,oBAAoB,OAAO;AAEtD,QACE,cAAc,UACd,CAAC,SAAS,iBAAiB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,cAAc;AAAA,IAAA,CACf,GACD;AACO,aAAA;AAAA,IACT;AAEA,WACE,UAAU,WAAW,SAAS,iBAC9B,eAAU,WAAW,WAArB,mBAA6B,UAAS,eAAe,iBACrD,CAAC,oBAAoB,uBAAuB,SAAS;AAAA,EAEzD;AAAA,EACA,uBAAuB,WAAqC;;AAC1D,UAAM,cAAa,qBAAU,aAAV,mBAAoB,KAAK,OAAzB,mBAA6B;AAEhD,YACE,yCAAY,UAAS,eAAe,wBACpC,gBAAW,SAAX,mBAAiB,UAAS,eAAe,kBACzC,WAAW,KAAK,OAAO,SAAS,eAAe,cAC/C,WAAW,KAAK,OAAO,SAAS;AAAA,EAEpC;AACF;"}