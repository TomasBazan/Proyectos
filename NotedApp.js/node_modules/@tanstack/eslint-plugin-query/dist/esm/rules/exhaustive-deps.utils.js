import { AST_NODE_TYPES } from "@typescript-eslint/utils";
import { ASTUtils } from "../utils/ast-utils.js";
const ExhaustiveDepsUtils = {
  isRelevantReference(params) {
    var _a;
    const { reference, scopeManager, context } = params;
    const component = ASTUtils.getFunctionAncestor(context);
    if (component !== void 0 && !ASTUtils.isDeclaredInNode({
      scopeManager,
      reference,
      functionNode: component
    })) {
      return false;
    }
    return reference.identifier.name !== "undefined" && ((_a = reference.identifier.parent) == null ? void 0 : _a.type) !== AST_NODE_TYPES.NewExpression && !ExhaustiveDepsUtils.isQueryClientReference(reference);
  },
  isQueryClientReference(reference) {
    var _a, _b, _c;
    const declarator = (_b = (_a = reference.resolved) == null ? void 0 : _a.defs[0]) == null ? void 0 : _b.node;
    return (declarator == null ? void 0 : declarator.type) === AST_NODE_TYPES.VariableDeclarator && ((_c = declarator.init) == null ? void 0 : _c.type) === AST_NODE_TYPES.CallExpression && declarator.init.callee.type === AST_NODE_TYPES.Identifier && declarator.init.callee.name === "useQueryClient";
  }
};
export {
  ExhaustiveDepsUtils
};
//# sourceMappingURL=exhaustive-deps.utils.js.map
