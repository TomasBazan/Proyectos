## React

Usar siempre librerias
Los componentes en react se definen como funciones y siempre con **CamelCase**
El main component se define con *export default**

La Syntaxis es de JSX esto quiere decir que siempre se cierra los tags como por ejemplo <br />
se puede declarar una funcion de la siguiente manera

	function name(){
		return(
			**some html code**
		);
	}

Esto lo va a llevar a renderizar todo el html cada vez que se use esta funcion

Sintaxis recomendada
const name_of_const = parameter_of_const => {
  if (onPerfEntry && onPerfEntry instanceof Function)...	
	**some code**
}

De esta manera definimos una constante que almacena una funcion. Toma un parametro que se espera que sea una funcion que se ejecute cuando las metricas de rendimiento esten disponibles.
Dentro del if se verifica que el parametro esta definido y que sea de tipo funcion






---
## REDUX

Una pagina esta compuesta de distintos componentes los cuales cada uno tiene un estado.

**Problema:** Si un componente A esta compuesto por un componente a. Y por otro lado tengo un componente B al que quiero consultar el estado. 'a' no conoce el estado de B por la gerarquia misma de el arbol de componentes.
**Solucion:** Un estado global al que todos los componentes pueden consultar y cambiar el estado.
Hay bibliotecas que se encargan de manejar esto, como por ejemplo:

Redux
Compuesto de tres partes:
- Store: Objeto de javascript el cual inmutable que almacenara el estado de la app.
- Actions: Objeto de js que almacena que operacion se va a ejecutar sobre el store. Son descripciones de las acciones que queremos realizar. Ej:
	const myAction = {
		type: 'counter/incremented',  // path to the endpoint
		payloag:20					  // dato que le queremos dar al store
	}


- Reducers: Como los Actions no especifican como ejecutar las acciones. Esto se define en funciones dispatch(). Los Reducers son las funciones que recibe dos parametros: 
- el estado actual: para saber los datos de la interfaz hasta ese momento
- el action.: para saber que datos ejecutar
Ejemplo:

const initialState = { value: 0}

function counterReducer(state = initialState, action){
	if (action.type == 'counter/incremented'){
		return{
			...state,
			value: state.value + 1
		}
	}
}


Biblioteca para manejar esto: Redux Toolkit
